kube_config_file   = "~/.kube/config"
docker_config_file = "~/.docker/config.json"
kong_license_file  = "~/.kong_license"

kong_image = "kong-docker-kong-enterprise-edition-docker.bintray.io/kong-enterprise-edition:2.3.2.0-alpine"

super_admin_password   = "password"
kong_database_password = "kong"

kong_admin_gui_auth_conf_file = "~/.kong_configs/admin_gui_auth_conf_okta_oidc"
kong_portal_auth_conf_file    = "~/.kong_configs/portal_auth_conf_okta_oidc"
datadog_api_key_path = "~/.datadog/api.key"

validity_period_hours = "8760"

kong_control_plane_config = {
  "KONG_ADMIN_LISTEN"             = "0.0.0.0:8444 ssl",
  "KONG_ADMIN_SSL_CERT_KEY"       = "/etc/secrets/kong-admin-api/tls.key",
  "KONG_ADMIN_SSL_CERT"           = "/etc/secrets/kong-admin-api/tls.crt",
  "KONG_ADMIN_GUI_SSL_CERT_KEY"   = "/etc/secrets/kong-admin-gui/tls.key",
  "KONG_ADMIN_GUI_SSL_CERT"       = "/etc/secrets/kong-admin-gui/tls.crt",
  "KONG_PORTAL_GUI_SSL_CERT_KEY"  = "/etc/secrets/kong-portal-gui/tls.key",
  "KONG_PORTAL_GUI_SSL_CERT"      = "/etc/secrets/kong-portal-gui/tls.crt",
  "KONG_PORTAL_API_SSL_CERT_KEY"  = "/etc/secrets/kong-portal-api/tls.key",
  "KONG_PORTAL_API_SSL_CERT"      = "/etc/secrets/kong-portal-api/tls.crt",
  "KONG_LOG_LEVEL"                = "debug",
  "KONG_ADMIN_GUI_AUTH"           = "basic-auth",
  # "KONG_ADMIN_GUI_AUTH"           = "openid-connect",
  "KONG_ADMIN_GUI_LISTEN"         = "0.0.0.0:8445 ssl",
  "KONG_ENFORCE_RBAC"             = "on",
  "KONG_PROXY_ACCESS_LOG"         = "/dev/stdout",
  "KONG_ADMIN_ACCESS_LOG"         = "/dev/stdout",
  "KONG_PROXY_ERROR_LOG"          = "/dev/stderr",
  "KONG_ADMIN_ERROR_LOG"          = "/dev/stderr",
  "KONG_PORTAL_GUI_ACCESS_LOG"    = "/dev/stdout",
  "KONG_PORTAL_GUI_ERROR_LOG"     = "/dev/stderr",
  "KONG_PORTAL_API_ACCESS_LOG"    = "/dev/stdout",
  "KONG_PORTAL_API_ERROR_LOG"     = "/dev/stderr",
  "KONG_PORTAL"                   = "on",
  "KONG_ADMIN_GUI_FLAGS"          = "{\"IMMUNITY_ENABLED\":true}",
  "KONG_PORTAL_GUI_LISTEN"        = "0.0.0.0:8446 ssl",
  "KONG_PORTAL_API_LISTEN"        = "0.0.0.0:8447 ssl",
  "KONG_PORTAL_GUI_PROTOCOL"      = "https",
  # "KONG_PORTAL_AUTH"              = "openid-connect",
  "KONG_PORTAL_AUTH"              = "basic-auth",
  "KONG_ANONYMOUS_REPORTS"        = "off",
  "KONG_ROLE"                     = "control_plane",
  "KONG_CLUSTER_CERT"             = "/etc/secrets/kong-cluster/tls.crt",
  "KONG_CLUSTER_CERT_KEY"         = "/etc/secrets/kong-cluster/tls.key",
  "KONG_CLUSTER_LISTEN"           = "0.0.0.0:8005 ssl",
  "KONG_CLUSTER_MTLS"             = "shared",
  "KONG_CLUSTER_TELEMETRY_LISTEN" = "0.0.0.0:8006 ssl",
  "KONG_STATUS_LISTEN"            = "0.0.0.0:8100",
  "KONG_STREAM_LISTEN"            = "off",
}

kong_data_plane_config = {
  "KONG_CLUSTER_CONTROL_PLANE"       = "kong-cluster.kong-hybrid-cp.svc.cluster.local:8005",
  "KONG_CLUSTER_TELEMETRY_ENDPOINT"  = "kong-cluster.kong-hybrid-cp.svc.cluster.local:8006",
  "KONG_ADMIN_ACCESS_LOG"            = "/dev/stdout",
  "KONG_PROXY_ACCESS_LOG"            = "/dev/stdout",
  "KONG_ADMIN_ACCESS_LOG"            = "/dev/stdout",
  "KONG_PROXY_ERROR_LOG"             = "/dev/stderr",
  "KONG_ADMIN_ERROR_LOG"             = "/dev/stderr",
  "KONG_ADMIN_GUI_LISTEN"            = "off",
  "KONG_ADMIN_LISTEN"                = "off",
  "KONG_CLUSTER_CERT"                = "/etc/secrets/kong-cluster/tls.crt",
  "KONG_CLUSTER_CERT_KEY"            = "/etc/secrets/kong-cluster/tls.key",
  "KONG_LUA_SSL_TRUSTED_CERTIFICATE" = "/etc/secrets/kong-cluster/tls.crt",
  "KONG_ROLE"                        = "data_plane",
  "KONG_CLUSTER_LISTEN"              = "off",
  "KONG_CLUSTER_MTLS"                = "shared",
  "KONG_CLUSTER_TELEMETRY_LISTEN"    = "off",
  "KONG_DATABASE"                    = "off",
  "KONG_LOG_LEVEL"                   = "debug",
  "KONG_LUA_PACKAGE_PATH"            = "/opt/?.lua;/opt/?/init.lua;;",
  "KONG_NGINX_WORKER_PROCESSES"      = "2",
  "KONG_PLUGINS"                     = "bundled",
  "KONG_PROXY_ACCESS_LOG"            = "/dev/stdout",
  "KONG_PROXY_ERROR_LOG"             = "/dev/stderr",
  "KONG_STREAM_LISTEN"               = "off"
  "KONG_PROXY_LISTEN"                = "0.0.0.0:8443 ssl",
  "KONG_STATUS_LISTEN"               = "0.0.0.0:8100",
  "KONG_SSL_CERT"                    = "/etc/secrets/kong-proxy/tls.crt",
  "KONG_SSL_CERT_KEY"                = "/etc/secrets/kong-proxy/tls.key",
}

dp_lb_svcs = {
  "kong-proxy" = {
    namespace                   = "kong-hybrid-dp"
    load_balancer_source_ranges = ["0.0.0.0/0"]
    annotations = {
      "service.beta.kubernetes.io/aws-load-balancer-security-groups"  = "<sg-id>",
      "service.beta.kubernetes.io/aws-load-balancer-backend-protocol" = "https",
      "service.beta.kubernetes.io/aws-load-balancer-ssl-ports"        = "kong-proxy-ssl",
      "service.beta.kubernetes.io/aws-load-balancer-internal"         = "true"
    }
    external_traffic_policy = "Local"
    health_check_node_port  = "30000"
    ports = {
      "kong-proxy-ssl" = {
        port        = 8443
        protocol    = "TCP"
        target_port = 8443
      }
    }
  }
}

cp_lb_svcs = {
  "kong-admin-api" = {
    namespace                   = "kong-hybrid-cp"
    load_balancer_source_ranges = ["0.0.0.0/0"]
    annotations = {
      "service.beta.kubernetes.io/aws-load-balancer-security-groups"  = "<sg-id>",
      "service.beta.kubernetes.io/aws-load-balancer-backend-protocol" = "https",
      "service.beta.kubernetes.io/aws-load-balancer-ssl-ports"        = "kong-admin-ssl,kong-portal-admin-ssl",
      "service.beta.kubernetes.io/aws-load-balancer-internal"         = "true"
    }
    external_traffic_policy = "Local"
    health_check_node_port  = "30001"
    ports = {
      "kong-admin-ssl" = {
        port        = 8444
        protocol    = "TCP"
        target_port = 8444
      },
      "kong-portal-admin-ssl" = {
        port        = 8447
        protocol    = "TCP"
        target_port = 8447
      }
    }
  }
  "kong-gui" = {
    namespace                   = "kong-hybrid-cp"
    load_balancer_source_ranges = ["0.0.0.0/0"]
    external_traffic_policy     = "Local"
    health_check_node_port      = "30002"
    annotations = {
      "service.beta.kubernetes.io/aws-load-balancer-security-groups"  = "<sg-id>",
      "service.beta.kubernetes.io/aws-load-balancer-backend-protocol" = "https",
      "service.beta.kubernetes.io/aws-load-balancer-ssl-ports"        = "kong-manager-ssl,kong-portal-gui-ssl",
      "service.beta.kubernetes.io/aws-load-balancer-internal"         = "true"
    }
    ports = {
      "kong-manager-ssl" = {
        port        = 8445
        protocol    = "TCP"
        target_port = 8445
      },
      "kong-portal-gui-ssl" = {
        port        = 8446
        protocol    = "TCP"
        target_port = 8446
      }
    }
  }
}

#tls_ingress = {
#  ca_common_name = "kong-ingress-ca"
#  namespaces     = ["kong-hybrid-cp", "kong-hybrid-dp"]
#  certificates = {
#    "kong-control-plane-ingress-tls" = {
#      common_name = "devportal.lan.local"
#      namespaces  = ["kong-hybrid-cp"]
#      allowed_uses = [
#        "key_encipherment",
#        "digital_signature",
#      ]
#      dns_names = [
#        "devportal.lan.local"
#      ]
#    },
#    "kong-data-plane" = {
#      common_name = "api.lan.local"
#      namespaces  = ["kong-hybrid-dp"]
#      allowed_uses = [
#        "key_encipherment",
#        "digital_signature",
#      ]
#      dns_names = [
#        "api.lan.local"
#      ]
#    }
#  }
#}
#
#dp_svcs = {
#  "kong-proxy-api" = {
#    namespace               = "kong-hybrid-dp"
#    external_traffic_policy = "Cluster"
#    health_check_node_port  = null
#    annotations             = {}
#    ports = {
#      "kong-proxy-ssl" = {
#        port        = 8443
#        protocol    = "TCP"
#        target_port = 8443
#      }
#    }
#  }
#}
#
#cp_svcs = {
#  "kong-dev-portal" = {
#    namespace               = "kong-hybrid-cp"
#    external_traffic_policy = "Cluster"
#    health_check_node_port  = null
#    annotations             = {}
#    ports = {
#      "kong-portal-gui-ssl" = {
#        port        = 8443
#        protocol    = "TCP"
#        target_port = 8443
#      }
#    }
#  },
#  "kong-cluster" = {
#    namespace   = "kong-hybrid-cp"
#    annotations = {}
#    ports = {
#      "kong-cluster" = {
#        port        = 8005
#        protocol    = "TCP"
#        target_port = 8005
#      },
#      "kong-telemetry" = {
#        port        = 8006
#        protocol    = "TCP"
#        target_port = 8006
#      }
#    }
#  }
#}
#
#dp_lb_svcs = {}
#
#cp_lb_svcs = {
#  "kong-admin-api" = {
#    namespace                   = "kong-hybrid-cp"
#    load_balancer_source_ranges = ["0.0.0.0/0"]
#    annotations = {
#      "service.beta.kubernetes.io/aws-load-balancer-backend-protocol" = "https"
#      "service.beta.kubernetes.io/aws-load-balancer-ssl-ports"        = "kong-admin-ssl"
#    }
#    external_traffic_policy = "Cluster"
#    health_check_node_port  = null
#    ports = {
#      "kong-admin-ssl" = {
#        port        = 443
#        protocol    = "TCP"
#        target_port = 8444
#      }
#    }
#  },
#  "kong-portal-admin-api" = {
#    namespace                   = "kong-hybrid-cp"
#    load_balancer_source_ranges = ["0.0.0.0/0"]
#    annotations = {
#      "service.beta.kubernetes.io/aws-load-balancer-backend-protocol" = "https"
#      "service.beta.kubernetes.io/aws-load-balancer-ssl-ports"        = "kong-portal-admin-ssl"
#    }
#    external_traffic_policy = "Cluster"
#    health_check_node_port  = null
#    ports = {
#      "kong-portal-admin-ssl" = {
#        port        = 443
#        protocol    = "TCP"
#        target_port = 8447
#      }
#    }
#  },
#  "kong-gui" = {
#    namespace                   = "kong-hybrid-cp"
#    load_balancer_source_ranges = ["0.0.0.0/0"]
#    external_traffic_policy     = "Cluster"
#    health_check_node_port      = null
#    annotations = {
#      "service.beta.kubernetes.io/aws-load-balancer-backend-protocol" = "https",
#      "service.beta.kubernetes.io/aws-load-balancer-ssl-ports"        = "kong-manager-ssl"
#    }
#    ports = {
#      "kong-manager-ssl" = {
#        port        = 443
#        protocol    = "TCP"
#        target_port = 8445
#      }
#    }
#  }
#}
#
#cp_ingress = {
#  "control-plane-ingress" = {
#    namespace = "kong-hybrid-cp"
#    annotations = {
#      "nginx.ingress.kubernetes.io/backend-protocol" = "HTTPS"
#    }
#    tls = {
#      hosts = [
#        "devportal.lan.local",
#      ]
#      secret_name = "kong-control-plane-ingress-tls"
#    }
#    rules = {
#      "kong-portal-gui" = {
#        host = "devportal.lan.local"
#        paths = {
#          "/" = {
#            service_name = "kong-portal"
#            service_port = 8446
#          }
#        }
#      }
#    }
#  }
#}
#
#dp_ingress = {
#  "data-plane-ingress" = {
#    namespace = "kong-hybrid-dp"
#    annotations = {
#      "nginx.ingress.kubernetes.io/backend-protocol" = "HTTPS"
#    }
#    tls = {
#      hosts = [
#        "api.lan.local"
#      ]
#      secret_name = "kong-data-plane-ingress-tls"
#    }
#    rules = {
#      "kong-proxy" = {
#        host = "api.lan.local"
#        paths = {
#          "/" = {
#            service_name = "kong-proxy-api"
#            service_port = 8443
#          }
#        }
#      }
#    }
#  }
#}
#
#tls_services = {
#  ca_common_name = "kong-services-ca"
#  namespaces     = ["kong-hybrid-cp", "kong-hybrid-dp"]
#  certificates = {
#    "kong-admin-api" = {
#      common_name = null
#      namespaces  = ["kong-hybrid-cp"]
#      allowed_uses = [
#        "key_encipherment",
#        "digital_signature",
#      ]
#    },
#    "kong-admin-gui" = {
#      common_name = null
#      namespaces  = ["kong-hybrid-cp"]
#      allowed_uses = [
#        "key_encipherment",
#        "digital_signature",
#      ]
#    },
#    "kong-portal-gui" = {
#      common_name = null
#      namespaces  = ["kong-hybrid-cp"]
#      allowed_uses = [
#        "key_encipherment",
#        "digital_signature",
#      ]
#    }
#    "kong-portal-api" = {
#      common_name = null
#      namespaces  = ["kong-hybrid-cp"]
#      allowed_uses = [
#        "key_encipherment",
#        "digital_signature",
#      ]
#    },
#    "kong-proxy" = {
#      common_name = null
#      namespaces  = ["kong-hybrid-dp"]
#      allowed_uses = [
#        "key_encipherment",
#        "digital_signature",
#      ]
#    }
#  }
#}
#
#tls_cluster = {
#  private_key_algorithm = "ECDSA"
#  ca_common_name        = "kong-cluster-ca"
#  override_common_name  = "kong_clustering"
#  namespaces            = ["kong-hybrid-dp"]
#  certificates = {
#    "kong-cluster" = {
#      common_name  = null
#      namespaces   = ["kong-hybrid-cp", "kong-hybrid-dp"]
#      allowed_uses = null
#    }
#  }
#}
